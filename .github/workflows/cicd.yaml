name: ML Challenge CI CD Pipeline

on:
  push:
    branches: [ main ]

jobs:
  build-entrypoint:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f app/entrypoint/requirements.txt ]; then pip install -r app/entrypoint/requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 app/entrypoint/ --count --select=E9,F63,F7,F82 --show-source --statistics 
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 app/entrypoint/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest app/entrypoint/test/

  build-processing:
    needs: build-entrypoint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python 3.8
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f app/processing/requirements.txt ]; then pip install -r app/processing/requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 app/processing --count --select=E9,F63,F7,F82 --show-source --statistics 
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 app/processing --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest app/processing/test/

  deploy:
    needs: build-processing
    runs-on: ubuntu-20.04
    steps:      
      - uses: actions/checkout@v2

      - name: Configure AWS credentials from your account
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${ secrets.AWS_ACCESS_KEY_ID }
          aws-secret-access-key: ${ secrets.AWS_SECRET_ACCESS_KEY }
          aws-region: us-east-1

      - name: Build and Push image
        run: |
          aws ecr get-login-password --region us-east-1 | docker login --username AWS --password-stdin ${ secrets.ACCOUNT_ID }.dkr.ecr.us-east-1.amazonaws.com
          docker build -t discovery .
          docker tag discovery:latest ${ secrets.ACCOUNT_ID }.dkr.ecr.us-east-1.amazonaws.com/discovery:latest
          docker push ${ secrets.ACCOUNT_ID }.dkr.ecr.us-east-1.amazonaws.com/discovery:latest

      - name: Create or update lambda function
        run: | 
          aws cloudformation deploy \
            --stack-name discovery-lambda-stack \
            --template-file lambda.yml \
            --capabilities CAPABILITY_NAMED_IAM